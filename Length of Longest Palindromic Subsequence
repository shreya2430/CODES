Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".


##CODE##

///time: O(n^2) && space: O(n)
    int longestPalindromeSubseq(string s) {
        
        if(s.length()==1){
            return 1;
        }
     
        vector<int>v(s.length());
        int back_up=0;
        for(int i=s.length()-1 ;i >=0;i--){
            
            back_up=0;
            
            for(int j=i;j<s.length();j++){
                if(i==j){
                    v[j] = 1; // a single character is always palindrome
                }
                
                else if(s[i] == s[j]){
                    int temp = v[j];
                    v[j] = back_up + 2;
                    back_up = temp;
                }
                
                else{
                   back_up = v[j];
                    v[j] = max(v[j-1],v[j]);
                }
            }
            
        }
        
        return v[s.length()-1];
        
        
        /// another approach
       // string r = s;
      // reverse(r.begin(),r.end());
        
      //now find longest common subsequence in both strings
      //  return lcs( s, r);
        
    }
};
