Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

##CODE

#define MAX 256
class Solution {
public:
    bool compare(vector<int>s1,vector<int>p1){
        for(int i=0;i<MAX;i++){
            if(s1[i]!=p1[i]){
                return false;
            }
        }
        return true;
    }
    vector<int> findAnagrams(string s, string p) {
        vector<int>v;
        vector<int>s1(MAX,0);
        vector<int>p1(MAX,0);
        
        if(p.length() > s.length()){
            return {};
        }
        
        for(int i=0;i<p.length();i++){
            s1[(s[i])]++;
            p1[(p[i])]++;
        }
        int i=0;
        for(i=p.length();i<s.length();i++)
        {
            if(compare(s1,p1)){
                v.push_back(i-p.length());
            }
            
            //s1[int(s[i-p.length()])]--;
            if(s1[s[i-p.length()]] >0){
                s1[s[i-p.length()]]--;
            }
            
            s1[(s[i])]++;
            
            }
        
        if(compare(s1,p1)){
            v.push_back(s.length()-p.length());
        }
        
        return v;
    }
};
